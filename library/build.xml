<?xml version="1.0" encoding="UTF-8"?>
<project name="LeanDogAndroidTasks" default="help">

    <!-- Override default property values with an external properties file, if present. -->
    <property file='build.properties'/>

    <!-- Default property values, if not overridden elsewhere: -->
    <property name='build' location='bin' />
    <property name='app.version' value='1.0'/>
    <property name='app.name' value='leandog-android-tasks'/>
    <property name='distro-name' value='${app.name}-${app.version}'/>
    <property name='out.dir' value='bin'/>
    <property name='src.dir' value='src'/>
    <tstamp><format property='build.time' pattern='yyyy-MM-dd HH:mm:ss'/></tstamp>

    <path id='compile.classpath'>
        <fileset dir='libs'>
            <include name='*.jar'/>
        </fileset>
    </path>

    <!-- Simply extends the compile.classpath with your own compiled classes. -->
    <path id='run.classpath'>
        <path refid='compile.classpath'/>
        <path location='${src.dir}'/>
    </path>

    <fileset id='class.files' dir='src'>
        <include name='${out.dir}/classes/**/*.class'/>
    </fileset>

    <fileset id='files.for.jar' dir='src'>
        <exclude name='${src.dir}'/>
    </fileset>

    <fileset id='test.classes' dir='src'>
        <include name='../unit/**/*Test.java'/>
    </fileset>

    <echo>
    Application: ${app.name} ${app.version}
    Build File : ${ant.file}
    Run Date   : ${build.time}
    Run by     : ${user.name}
    Build Dir  : ${build}
    Base Dir   : ${basedir}
    Java Home  : ${java.home}
    Deployment host running: ${deployment.server.running}
    </echo>

    <target name='setup' description="Creates all build artifacts." >
        <echo message='Create build directory, and its subdirectories.'/>
        <mkdir dir="${build}"/>
        <mkdir dir="${build}/classes/"/>
    </target>

    <!-- Now define the targets, which use the properties and datatypes defined above. -->

    <target name='clean' description="Delete all build artifacts." >
        <delete dir='${build}'/>
        <delete>
            <fileset refid='class.files'/>
        </delete>
    </target>

    <target name='compile' depends="setup" description='Compile source files and place beside source.'>
        <javac srcdir="${src.dir}" destdir="${out.dir}/classes/">
            <classpath refid='compile.classpath'/>
        </javac>
        <!-- Here's a simple way of debugging a path, fileset, or patternset, using its refid: -->
        <echo>Classpath: ${toString:compile.classpath}</echo>
    </target>

    <target name='test' description='Run all JUnit tests.' depends='compile'>
        <junit haltonfailure='true'>
            <classpath>
                <pathelement location="src"/>
            </classpath>
            <batchtest>
                <fileset refid='test.classes'/>
            </batchtest>
            <formatter type='brief' usefile='no'/>
        </junit>
    </target>

    <target name='jar' description='Create a jar file for distribution.' depends='compile'>
        <jar destfile='${build}/${distro-name}.jar' duplicate='preserve'>
            <fileset refid='files.for.jar'/>
            <!-- The static manifest.mf file is merged with additional dynamic items, specified here : -->

              <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <section name="common">
                  <attribute name="Specification-Title" value="Example"/>
                  <attribute name="Specification-Version" value="${version}"/>
                  <attribute name="Specification-Vendor" value="LeanDog"/>
                  <attribute name="Implementation-Version" value="${version} ${TODAY}"/>
                  <attribute name="Implementation-Vendor" value="Example Corp."/>
                </section>
              </manifest>
        </jar>
    </target>

    <target name='all' description='Create all build artifacts.'
        depends='clean, compile, test, jar'>
        <echo>Finished creating all build artifacts.</echo>
    </target>

</project>
